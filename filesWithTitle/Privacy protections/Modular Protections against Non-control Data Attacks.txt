this paper introduces yarra, a conservative extension to c to protect applications from non-control data attacks. yarra programmers specify their data integrity requirements by declaring critical data types and ascribing these critical types to important data structures. yarra guarantees that such critical data is only written through pointers with the given static type. any attempt to write to critical data through a pointer with an invalid type (perhaps because of a buffer overrun) is detected dynamically. we formalize yarra's semantics and prove the soundness of a program logic designed for use with the language. a key contribution is to show that yarra's semantics are strong enough to support sound local reasoning and the use of a frame rule, even across calls to unknown, unverified code. we evaluate a prototype implementation of a compiler and runtime system for yarra by using it to harden four common server applications against known non-control data vulnerabilities. we show that yarra defends against these attacks with only a negligible impact on their end-to-end performance.modular protections against non-control data attacks