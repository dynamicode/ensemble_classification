we specify a hardware architecture that supportstamper-resistant software by identifying an "idealized"model, which gives the abstracted actions available to asingle user program. this idealized model is compared toa concrete "actual" model that includes actions of an adversarialoperating system. the architecture is verified byusing a finite-state enumeration tool (a model checker) tocompare executions of the idealized and actual models. inthis approach, software tampering occurs if the system canenter a state where one model is inconsistent with the other.in performing the verification, we detected an replay attackscenario and were able to verify the security of our solutionto the problem. our methods were also able to verifythat all actions in the architecture are required, as well ascome up with a set of constraints on the operating system toguarantee liveness for users.specifying and verifying hardware for tamper-resistant software