although there have been attempts to develop code transformations that yield tamper-resistant software, no reliable software-only methods are known. this paper studies the hardware implementation of a form of execute-only memory (xom) that allows instructions stored in memory to be executed but not otherwise manipulated. to support xom code we use a machine that supports internal compartments---a process in one compartment cannot read data from another compartment. all data that leaves the machine is encrypted, since we assume external memory is not secure. the design of this machine poses some interesting trade-offs between security, efficiency, and flexibility. we explore some of the potential security issues as one pushes the machine to become more efficient and flexible. although security carries a performance penalty, our analysis indicates that it is possible to create a normal multi-tasking machine where nearly all applications can be run in xom mode. while a virtual xom machine is possible, the underlying hardware needs to support a unique private key, private memory, and traps on cache misses. for efficient operation, hardware assist to provide fast symmetric ciphers is also required.