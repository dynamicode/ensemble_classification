existing security models require that information of a given security level be prevented from ``leaking'' into lower-security information. high-security applications must be demonstrably free of such leaks, but such demonstration may require substantial manual analysis. other authors have argued that the natural way to enforce these models automatically is with information-flow analysis, but have not shown this to be practicable for general purpose programming languages in current use. modern safety-critical systems can contain software components with differing safety integrity levels, potentially operating in the same address space. this case poses problems similar to systems with differing security levels; failure to show separation of data may require the entire system to be validated at the higher integrity level. in this paper we show how the information flow model enforced by the spark examiner provides support for enforcing these security and safety models. we describe an extension to the spark variable annotations which allows the specification of a security or safety level for each state variable, and an extension to the spark analysis which automatically enforces a given information flow policy on a spark program.